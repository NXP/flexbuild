#!/bin/bash

# Copyright 2017-2021 NXP
#
# SPDX-License-Identifier: BSD-3-Clause
#
# Author: Shengzhou Liu <shengzhou.liu@nxp.com>
#
#
# utility to generate custom aarch64/armhf/x86 ubutnu/debian userland with configurable packages.


set -e

VERSION=1.2
ARCH=`uname -m`

usage() {
    echo "usage: create_distrorfs <arch> <codename> [ <distro-scale> <package-list> ]"
    echo example:
    echo " create_distrorfs arm64 focal"
    echo " create_distrorfs amd64 bullseye main"
    exit
}


ARGS=`getopt -a -o vh -l version,help -- "$@"`
[ $? -ne 0 ] && usage
eval set -- "${ARGS}"
while true
do
	case "$1" in
	-v|--version)
		echo $VERSION
		exit;;
	-h|--help)
		usage;;
	--)
		shift
		break;;
	esac
shift
done

[ $# -lt 2 ] && usage

do_distrorfs_first_stage() {
    [ -z "$RFSDIR" ] && RFSDIR=$FBOUTDIR/rfs/rootfs_${DISTROTYPE}_${2}_${tarch}_$DISTROSCALE
    [ -f $RFSDIR/etc/.firststagedone ] && echo $RFSDIR firststage exist! && return
    [ -f /etc/.firststagedone -a ! -f /proc/uptime ] && return

    for pkg in binfmt-support qemu-system-common qemu-user-static debootstrap; do
	if ! dpkg-query -l $pkg | grep ii 1>/dev/null; then
	    echo installing $pkg
	    sudo apt -y install $pkg
        fi
    done

    if [ $1 = arm64 ]; then
	tgtarch=aarch64
    elif [ $1 = armhf ]; then
	tgtarch=arm
    fi

    [ ! -f /usr/sbin/update-binfmts ] && echo update-binfmts not found && exit 1

    if update-binfmts --display qemu-$tgtarch | grep -q disabled; then
	sudo update-binfmts --enable qemu-$tgtarch
	if update-binfmts --display qemu-$tgtarch | grep disabled; then
	    echo enable qemu-$tgtarch failed && exit 1
	else
	    echo enable qemu-$tgtarch successfully
	fi
    fi

    [ ! -f /usr/bin/qemu-${tgtarch}-static ] && echo qemu-${tgtarch}-static not found && exit 1
    [ ! -f /usr/sbin/debootstrap ] && echo debootstrap not found && exit 1
    sudo mkdir -p $RFSDIR/usr/bin
    [ $1 != amd64 -a ! -f $RFSDIR/usr/bin/qemu-${tgtarch}-static ] && sudo cp /usr/bin/qemu-${tgtarch}-static $RFSDIR/usr/bin
    sudo mkdir -p $RFSDIR/usr/local/bin
    sudo cp -f $FBDIR/tools/create_distrorfs $FBDIR/tools/flex-installer $RFSDIR/usr/local/bin/
    sudo chmod +x $RFSDIR/usr/local/bin/create_distrorfs
    sudo cp -f $FBDIR/src/misc/*.sh $RFSDIR/usr/local/bin/
    sudo mkdir -p $RFSDIR/etc/systemd/system
    sudo cp -f $FBDIR/src/misc/boot.mount $RFSDIR/etc/systemd/system/

    packages_list=$FBDIR/configs/ubuntu/$4
    [ ! -f $packages_list ] && echo $packages_list not found! && exit 1

    echo extra packages list: $packages_list
    sudo mkdir -p $RFSDIR/usr/aptpkg
    sudo cp -f $packages_list $RFSDIR/usr/aptpkg
    sudo cp -f $FBDIR/configs/ubuntu/reconfigpkg.sh $RFSDIR/usr/bin/

    if [ -n "$http_proxy" ]; then
	sudo mkdir -p $RFSDIR/etc/apt
	echo "http_proxy = $http_proxy" | sudo tee -a /etc/wgetrc 1>/dev/null
	echo "Acquire::http::proxy \"$http_proxy\";" | sudo tee -a $RFSDIR/etc/apt/apt.conf 1>/dev/null
    fi
    if [ -n "$https_proxy" ]; then
	echo "https_proxy = $https_proxy" | sudo tee -a /etc/wgetrc 1>/dev/null
	echo "Acquire::https::proxy \"$https_proxy\";" | sudo tee -a $RFSDIR/etc/apt/apt.conf 1>/dev/null
    fi

    if [ ! -d $RFSDIR/debootstrap -a $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ]; then
	export LANG=en_US.UTF-8
	sudo debootstrap --arch=$1 --foreign --merged-usr $2 $RFSDIR
	export LC_ALL="en_US.UTF-8" && export LANGUAGE="en_US.UTF-8" && export LANG="en_US.UTF-8"
	echo "installing for second-stage ..."
	DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \
	sudo chroot $RFSDIR /debootstrap/debootstrap --merged-usr --variant=minbase --second-stage
	echo "configure ... "
	DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \
	sudo chroot $RFSDIR dpkg --configure -a
    fi
    if [ $DISTROTYPE = ubuntu ]; then
	sudo cp -f $FBDIR/src/misc/sdk/{legal,README.SDK} $RFSDIR/etc
    fi
    echo "$DISTRIB_NAME,$DISTRIB_VERSION,(custom based on $DISTROTYPE $DISTRO_VERSION)" | sudo tee $RFSDIR/etc/.firststagedone 1>/dev/null

    # set U-Boot version info in userland for readable in linux run-time
    [ -d $FBOUTDIR/bsp/u-boot ] && uvfile=$(find $FBOUTDIR/bsp/u-boot/*/output/*/include/generated -name version_autogenerated.h | head -1)
    if [ -n "$uvfile" -a -f $uvfile ]; then
	ubootVersion=`head -1 $uvfile | cut -d' ' -f3`
	ubootVersion=`echo $ubootVersion | sed 's/\"//g'`
	echo Bootloader Version: U-Boot $ubootVersion | sudo tee -a $RFSDIR/etc/.firststagedone 1>/dev/null
    fi
    sudo chroot $RFSDIR create_distrorfs $1 $2 $3 $4
}


do_distrorfs_second_stage() {
    [ -f /etc/buildinfo -a ! -f /proc/uptime ] && return
    packages_list=/usr/aptpkg/$4
    . $packages_list

    # create user and passwd
    if [ ! -d /home/user ]; then
	useradd -m -d /home/user -s /bin/bash user
	gpasswd -a user sudo
	echo -e 'root\nroot\n' | passwd root
	echo -e 'user\nuser\n' | passwd user
	usermod -aG sudo user
    fi

    # set default hostname
    echo localhost > /etc/hostname

    # set apt sources list to install additional packages
    asl=/etc/apt/sources.list
    if [ $DISTROTYPE = ubuntu ]; then
	rm -f $asl
	if [ $ARCH = "x86_64" -o $ARCH = "i686" ]; then
	    fn=archive; pn=ubuntu;
	else
	    fn=ports; pn=ubuntu-ports;
	fi
	echo deb http://us.$fn.ubuntu.com/$pn/ $2 main >> $asl
	echo deb-src http://us.$fn.ubuntu.com/$pn/ $2 main >> $asl
	echo deb http://us.$fn.ubuntu.com/$pn/ $2-updates main >> $asl
	echo deb http://$fn.ubuntu.com/$pn $2-security main >> $asl

	# permit installing packages from universe/multiverse repo
	echo deb http://us.$fn.ubuntu.com/$pn/ $2 universe multiverse >> $asl
	echo deb http://us.$fn.ubuntu.com/$pn/ $2-updates universe multiverse >> $asl

	# some packages are available only in previous bionic instead of focal
	# echo deb http://us.$fn.ubuntu.com/$pn/ bionic universe >> $asl
    elif [ $DISTROTYPE = debian ]; then
	rm -f $asl
	echo deb [arch=$1] http://mirrors.kernel.org/debian/ $2 main >> $asl
    fi

    export LC_ALL="en_US.UTF-8" && export LANGUAGE="en_US.UTF-8" && export LANG="en_US.UTF-8"
    apt -y update
    DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \
    apt install -y locales
    locale-gen en_US.UTF-8
    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8

    if [ $DISTROTYPE = ubuntu -a $DISTROSCALE != lite ]; then
	if ! dpkg-query -W language-pack-en-base 1>/dev/null; then
	    echo installing language-pack-en-base ..
	    DEBIAN_FRONTEND=noninteractive apt install -y language-pack-en-base
	fi
    fi

    mkdir -p /dev/pts
    test -f /dev/pts/ptmx || mount -t devpts devpts /dev/pts
    test -f /proc/uptime || mount -t proc proc /proc
    test -d /sys/devices || mount -t sysfs sys /sys
    # mount -t tmpfs tmp /tmp

    # Add additional packages from main repo for user's convenience
    [ $DISTROSCALE = lite ] && pkglist=$extra_lite_packages_list || pkglist=$extra_main_packages_list
    echo installing extra packages: $pkglist
    for pkg in $pkglist; do
	echo Installing $pkg ...
	DEBIAN_FRONTEND=noninteractive apt -y install $pkg || true
    done

    if [ $DISTROSCALE = desktop ]; then
	for pkg in $extra_desktop_packages_list; do
	    DEBIAN_FRONTEND=noninteractive apt -y install $pkg || true
	done

	# use sdk custom library in /usr/lib prior to the defaul /lib/aarch64-linux-gnu
	echo /usr/lib  > /etc/ld.so.conf.d/01-sdk.conf

	# Fix gnome-session GsmSessionSave Permission denied
	[ -d /var/lib/gdm3/.config ] && chmod 775 /var/lib/gdm3/.config
    fi

    echo Installed extra packages.

    [ $DISTROSCALE = lite ] && mkdir -p /etc/systemd/system/local-fs.target.wants && \
    ln -sf /etc/systemd/system/boot.mount /etc/systemd/system/local-fs.target.wants/boot.mount

    rm -f /usr/bin/perf && ln -sf /boot/tools/perf /usr/bin/perf

    if [ $DISTROSCALE = devel -o $DISTROSCALE = desktop ]; then
	# install more devel packages from universe repo
	echo installing packages for devel userland: $extra_devel_packages_list
	for pkg in $extra_devel_packages_list; do
	    echo installing $pkg ...
	    DEBIAN_FRONTEND=noninteractive apt -y install $pkg || true
	done
	echo installed extra devel packages

	echo installing python pip packages for devel userland: $extra_python_pip_packages_list
	for pkg in $extra_python_pip_packages_list; do
	    pip3 install $pkg || true
	done
    fi

    # clean cached packages
    apt clean

    # rm -rf /var/lib/apt/lists/*

    # allow to install non-main packages by users themselves on target board
    if [ $DISTROTYPE = ubuntu ] && ! `grep universe $asl 1>/dev/null`; then
	echo deb http://us.$fn.ubuntu.com/$pn/ $2 universe >> $asl
	echo deb http://us.$fn.ubuntu.com/$pn/ $2-updates universe >> $asl
	echo deb http://us.$fn.ubuntu.com/$pn/ $2 multiverse >> $asl
	echo deb http://us.$fn.ubuntu.com/$pn/ $2-updates multiverse >> $asl
	apt update
    fi

    if [ $1 = arm64 ]; then
	sysarch=aarch64-linux-gnu
    elif [ $1 = armhf ]; then
	sysarch=arm-linux-gnueabihf
    fi


    ln -sf python3 /usr/bin/python
    ln -sf /sbin/init /init
    ln -sf /boot/modules /lib/modules

    # use relative directory instead of absolute directory to support cross build
    cd /lib/$sysarch
    liblist=`ls -l | grep  /lib/$sysarch/lib | cut -d'>' -f2 | cut -d/ -f4 |  tr "\n" " "`
    for libname in $liblist; do
	ln -sf $libname ${libname%%.*}.so
    done

    # for cross build with libxml
    ln -sf $sysarch/`realpath /usr/lib/*/libxml2.so.* | head -1 | cut -d/ -f5` /usr/lib/libxml2.so

    ln -sf liblua5.3.so /lib/$sysarch/liblua.so


    tmpusr=`ls -t /home | cut -d' ' -f1 | head -1`
    [ -d /home/$tmpusr -a "$tmpusr" != "user" ] && rm -rf /home/$tmpusr
    /usr/bin/reconfigpkg.sh && rm -f /usr/bin/reconfigpkg.sh

    setup_distribution_info $3 $2
    test -c /dev/pts/0 && umount /dev/pts
    test -f /proc/uptime && umount /proc

    # create packages.list
    echo APT Packages List: > /etc/packages.list
    echo -e "Package\t Version\t Download-Size\t APT-Sources" >> /etc/packages.list
    apt list --installed | cut  -d/ -f1 | xargs apt show | \
	grep -E '^Package:|^APT-Sources:|^Version:|^Download-Size:'  > pktlist
    lnum=`wc -l pktlist |cut -d' ' -f1`
    for((i=1; i<$lnum;)); do
	t=$[ $i + 3 ]
	sed -n "${i},${t}p" pktlist | grep -E 'Package:|APT-Sources:|Version:|Download-Size:' | \
	tr "\n" " "  | cut -d' ' -f2,4,6,7,9,10 >> /etc/packages.list
	i=$[ $i + 4 ]
    done
    rm -rf /usr/aptpkg pktlist /var/log/bootstrap.log
}

setup_distribution_info () {
    distroname=`head -1 /etc/.firststagedone | cut -d, -f1`
    distroversion=`head -1 /etc/.firststagedone | cut -d, -f2`
    distrodescription=`head -1 /etc/.firststagedone | cut -d, -f3`
    distroversion=${distroversion: -4}
    releaseversion="$distroname $distroversion $distrodescription $tarch $DISTROSCALE"
    releasestamp="Build: `date +'%Y-%m-%d %H:%M:%S'`"
    echo "$releaseversion" > /etc/buildinfo
    sed -i "1 a\\$releasestamp" /etc/buildinfo
    if grep U-Boot /etc/.firststagedone 1>/dev/null 2>&1; then
	tail -1 /etc/.firststagedone >> /etc/buildinfo
    fi

    if [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ]; then
	echo "$distroname $distroversion $1 $distrodescription" > /etc/issue
	echo "$distroname $distroversion $1 $distrodescription" > /etc/issue.net

	tgtfile=/etc/update-motd.d/00-header
	echo '#!/bin/sh' > $tgtfile
	echo '[ -r /etc/lsb-release ] && . /etc/lsb-release' >> $tgtfile
	echo "SDK_DESCRIPTION=\"Welcome to $distroname $distroversion $1 $distrodescription\"" >> $tgtfile
	echo 'echo "$SDK_DESCRIPTION ($(uname -o) $(uname -r) $(uname -m))"' >> $tgtfile

	tgtfile=/usr/lib/os-release
	sed -i "s/Ubuntu.*LTS/$distroname $distroversion $1/" $tgtfile

	tgtfile=/etc/update-motd.d/10-help-text
	echo '#!/bin/sh' > $tgtfile
	echo 'printf "\n"' >> $tgtfile
	echo 'printf " * Support:        https://www.nxp.com\n"' >> $tgtfile
	echo 'printf " * Licensing:      https://lsdk.github.io/eula\n"' >> $tgtfile

	rm -f /etc/default/motd-news /etc/update-motd.d/50-motd-news
    fi
}


if [ $2 = jessie -o $2 = stretch -o $2 = buster -o $2 = bullseye ]; then
    DISTROTYPE=debian
elif [ $2 = xenial -o $2 = bionic -o $2 = focal ] || [ -z "$DISTROTYPE" ]; then
    DISTROTYPE=ubuntu
fi

# $DISTROSCALE can be main, lite, devel, desktop, for various scenario
[ -z "$3" ] && DISTROSCALE=main || DISTROSCALE=$3
[ -z "$4" ] && packagelist=extra_packages_list || packagelist=$4
[ $1 = armhf ] && tarch=arm32 || tarch=$1

do_distrorfs_first_stage $1 $2 $DISTROSCALE $packagelist

if [ $ARCH = aarch64 -o $ARCH = armv7l ] && [ ! -f /proc/uptime ]; then
    do_distrorfs_second_stage $1 $2 $DISTROSCALE $packagelist
fi
